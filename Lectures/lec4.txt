Records in OCaml
type student = {id: string, name: string, gpa: float}
val make_student i n g = {id = i; name = n; gpa = g}
val make_student id name gpa = {id; name; gpa}
let s1 = {id = "0000"; name = "Abdo"; gpa = 4.0};



let name {name; id; gpa} = name;;
same as ommitting unneeded fields:
let name {name} = name;;


type instructor = {id; string; name: string, salary: float}
let inst1 = {id = "a489461"; name = "Bob";; 

// When naming a field in the new record that has the name of another field previously defined, it's applied to the last one defined, so define records with fields with different names...Ambiguity is the issue, using constructors fixes the ambiguity. 

// Using a Student constructo like so: type student = Student {....} 

// specify that a field is to be mutable.
type student' = {id: string, name: string, mutable gpa: float}

// Most types in Ocaml such as integers and strings are immutable

// Update syntax:
let s2 = {s with gpa = 26.5} // this doesn't mutate s1's gpa but s2 has the new value
type student' = {id: string, name: string, mutable gpa: float}
let s1' = {id = "0000"; name = "Abdo"; gpa = 3.9};
s1' <- 4.0


s2' = s1'
// if we mutate a field of s2' then so will the correspoinding field of s1', because fields are shared and are actually just pointers. This is only a problem with mutables...



// What's a reference type???
let r = ref 0

!r
r := 1

incr r
decr r
!r

// Defining reference types, they're records with mutable fields
type 'a ref = {mutable contents:'a}
let ref v = {contents = v}
//defining the ! operator to return content
let ( ! ) r = r.contents
// defining the :=  operator which sets value
let ( := ) r v = r.contents <- v

let incr r = r.contents <- !r + 1
let decr r = r.contents <- !r - 1

// Arrays 
let a = [|1;2;3|]
a.(0) = 1
// exceed bounds -> throws exception
// Arrays are mutable
a.(0) <- 8

// Print functions with arraysc
let print_in_array a = 
	for i = 0 to Array.length a - 1 do
		print_int a.(i); print_newline ()
		// semicolon is for sequencing, throws away a value then prints, i,e only keeps the last value as a return!!! HUGE 
	done

// reverse array for-loop traversal and print
let rev_print_int_array a = 
	for i = Array.length a -1 downto 0 do
		print_int a.(i); print_newline ()


//Finding the prime numbers using while loops and some list piping 

let primes n =
	let isprime = Array.make n true in
	for i = 2 to n -1 do
		if isprime.(i) then
			let h = ref 2 in
				while !j * i < n do
					isprime.(!j*i) <- false; incr j
				done
	done
	isprime.(0) <- false;
	isprime.(1) <- false;
	isprime |> Array.to_list |> List.mapi (fun i x -> (i,x)) |> List.filter_map (fun (i,x) -> if x then Some i else none)
					
// Counting lines

// the read_linn function is for input and will fail with exception if EOF
let line = read_line ()


// how to catch Exception... and use pattern matching to catch different exceptions

let rec number_lines acc = 
	try
		Printf.printf "%d: %s\n" acc read_line ();
		number_lines (acc + 1) 
		with 
		| End_of_file -> () // return unit aka nothing
		
		
// No main functions in Ocaml but can doe something that returns Unit
let () = number_lines 1
	
	
// To build the project use ocamlbuild file_name.native
// IO redirection in OCaml using `program < input_file` and `program > output_file` and 2> `error_file`


// Scanf function from the Scanf module
// remember to account for the escape char white space when you format for scanf
Scanf.scanf " %d" (fun x -> x) // applies fun to whatever it scans


let rec sum acc = 
	try
		sum (Scanf.scanf " %d" (fun x -> acc + x))
	with
	| _ -> acc
	
let () =
	Printf.printf "%d\n" @@ sum 0


// The square root function only deals with floats
// So need to convert float to int
let isqrt n =
	n |> float_of_int |> sqrt |> int_of_float
	
// now to redo the primes function
let primes n =
	let isprime = Array.make n true in
	for i = 2 to isqrt n do
		if isprime.(i) then
			let h = ref 2 in
				while !j * i < n do
					isprime.(!j*i) <- false; incr j
				done
	done
	isprime.(0) <- false;
	isprime.(1) <- false;
	isprime |> Array.to_list |> List.mapi (fun i x -> (i,x)) |> List.filter_map (fun (i,x) -> if x then Some i else none)


// open file for write and read
using open_in "file_name"
